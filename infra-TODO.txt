# 💰 個人開発向け低コストインフラ構成 TODO

## 🎯 インフラ構成の選択肢

このプロジェクトでは、以下の2つの低コストインフラ構成から選択できます：

1. **Option A: VPSベース構成** （月額約2,000円）
   - さくらのVPS または DigitalOcean
   - Let's Encrypt（無料SSL）
   - Cloudflare無料プラン（CDN/DDoS保護）

2. **Option B: GCP + Cloudflare構成** （月額約3,000円）
   - Google Cloud Platform（Compute Engine e2-medium）
   - Cloud SQL（最小構成）+ Memorystore Redis
   - Cloudflare無料プラン（CDN/DDoS保護）

---

## 📋 Option A: VPSベース構成（月額約2,000円）

### 💸 想定月額コスト内訳

| 項目 | サービス | 月額コスト |
|------|----------|-----------|
| VPS | さくらのVPS 2G | 1,738円 |
| ドメイン | 年額÷12 | 83円 |
| 監視 | UptimeRobot無料 | 0円 |
| CDN | Cloudflare無料 | 0円 |
| SSL | Let's Encrypt | 0円 |
| **合計** | | **1,821円/月** |

### 📋 必要最低限のインフラ基盤構築

#### [TODO] VPS環境セットアップ（月額予算: 2000-3000円）
- [ ] **VPS選定**: さくらのVPS (2GB/2CPU) または DigitalOcean Droplet ($20/月)
- [ ] **OS設定**: Ubuntu 24.04 LTS, Docker, Docker Compose インストール
- [ ] **セキュリティ**: SSH鍵認証、ファイアウォール設定、fail2ban導入
- [ ] **ドメイン取得**: お名前.com または Cloudflare Registrar（年額1000円程度）

#### [TODO] Docker本番環境用設定
- [ ] **docker-compose.prod.yml** 作成（本番環境用設定）
- [ ] **環境変数管理**: .env.production 作成、機密情報の環境変数化
- [ ] **ヘルスチェック**: 各サービスのヘルスチェック設定
- [ ] **リソース制限**: memory, CPU制限設定で安定稼働確保

#### [TODO] 無料SSL証明書とHTTPS化
- [ ] **Let's Encrypt**: certbot使用、SSL証明書自動取得・更新
- [ ] **Nginx設定**: SSL終端、HTTP→HTTPS リダイレクト
- [ ] **自動更新**: cron job設定（証明書の自動更新）
- [ ] **セキュリティヘッダー**: HSTS、CSP等の基本的なセキュリティヘッダー追加

#### [TODO] 無料CDN導入（Cloudflare無料プラン）
- [ ] **Cloudflare DNS**: ドメインのDNS管理
- [ ] **CDN設定**: 静的アセット（画像、CSS、JS）のキャッシュ
- [ ] **DDoS保護**: Cloudflareの無料DDoS保護利用
- [ ] **SSL設定**: Cloudflare側のSSL設定

### 🔄 CI/CD自動デプロイ環境構築

#### [TODO] GitHub Actions デプロイパイプライン構築
- [ ] **本番デプロイワークフロー**: `.github/workflows/deploy.yml` 作成
- [ ] **デプロイ条件**: main ブランチへのpush時の自動デプロイ
- [ ] **デプロイ前テスト**: 全テストスイート実行後にデプロイ
- [ ] **ロールバック機能**: デプロイ失敗時の自動ロールバック

#### [TODO] VPSへの安全なデプロイ設定
- [ ] **SSH鍵設定**: GitHub Actions からVPSへのSSH接続設定
- [ ] **デプロイユーザー**: 専用デプロイユーザー作成、sudo権限制限
- [ ] **Docker イメージ管理**: GitHub Container Registry 使用（無料）
- [ ] **デプロイスクリプト**: `scripts/deploy.sh` 作成

#### [TODO] ゼロダウンタイムデプロイ実装
- [ ] **Blue-Green風デプロイ**: Docker Compose でのコンテナ切り替え
- [ ] **ヘルスチェック**: デプロイ後の自動ヘルスチェック
- [ ] **ログ出力**: デプロイ状況の詳細ログ出力
- [ ] **Slack通知**: デプロイ成功・失敗のSlack通知（Webhook使用）

### 📊 低コスト監視・バックアップ体制

#### [TODO] 無料監視ツール導入
- [ ] **UptimeRobot**: Webサイト稼働監視（無料で50サイトまで）
- [ ] **Grafana Cloud**: 基本メトリクス監視（無料枠: 10K metrics）
- [ ] **システム監視**: VPS基本リソース（CPU、メモリ、ディスク）監視
- [ ] **アラート設定**: ダウン時のメール・Slack通知

#### [TODO] 簡易ログ管理
- [ ] **Docker logs**: コンテナログの一元管理
- [ ] **logrotate**: ログファイルのローテーション設定
- [ ] **VPSログ監視**: システムログ（/var/log）の監視
- [ ] **ログ保存期間**: ディスク容量考慮した適切な保存期間設定

#### [TODO] 低コストバックアップ戦略
- [ ] **VPSスナップショット**: 週1回の自動スナップショット（VPS機能利用）
- [ ] **データベースバックアップ**: 日次PostgreSQLダンプ、ローカル保存
- [ ] **アップロードファイルバックアップ**: rsync使用、外部ストレージ同期
- [ ] **バックアップ検証**: 月1回のリストア確認

### 🔧 パフォーマンス最適化（無料範囲）

#### [TODO] Nginx最適化
- [ ] **gzip圧縮**: テキストファイルの圧縮設定
- [ ] **静的ファイルキャッシュ**: 画像、CSS、JSの適切なキャッシュ設定
- [ ] **接続最適化**: keep-alive、worker設定の調整
- [ ] **レスポンスヘッダー**: キャッシュ制御ヘッダーの設定

#### [TODO] データベース最適化
- [ ] **PostgreSQL設定**: shared_buffers、max_connections等の調整
- [ ] **インデックス確認**: 既存クエリに対する適切なインデックス設定
- [ ] **定期メンテナンス**: VACUUM、ANALYZE の定期実行
- [ ] **接続プール**: アプリケーション側の接続プール設定

#### [TODO] アプリケーション最適化
- [ ] **静的ファイル**: フロントエンドビルドの最適化
- [ ] **画像最適化**: アップロード画像の自動圧縮・リサイズ
- [ ] **メモリ使用量**: Go アプリケーションのメモリ使用量監視
- [ ] **WebSocket最適化**: 接続数制限、タイムアウト設定の調整

---

## 📋 Option B: GCP + Cloudflare構成（月額約3,000円）

### 💰 月額コスト内訳（概算）

| サービス | スペック | 月額（円） |
|---------|----------|-----------|
| **Compute Engine** | e2-medium (2vCPU, 4GB) | 約1,800円 |
| **Cloud SQL** | db-f1-micro (0.6GB, 10GB SSD) | 約800円 |
| **Memorystore Redis** | Basic 1GB | 約400円 |
| **Cloud Storage** | 10GB + 転送量 | 約100円 |
| **固定IP** | 1個 | 約100円 |
| **Cloudflare** | 無料プラン | 0円 |
| **合計** | | **約3,200円** |

### 🚀 GCPプロジェクト設定

#### [TODO] GCP初期設定
- [ ] **プロジェクト作成**: `quiz-app-prod` プロジェクト作成
- [ ] **API有効化**: Compute Engine, Cloud SQL, Memorystore, Cloud Storage API有効化
- [ ] **請求設定**: 請求アカウントリンク、予算アラート設定（3,500円）
- [ ] **リージョン選択**: asia-northeast1（東京）を使用

#### [TODO] ネットワーク設定
- [ ] **VPC作成**: `quiz-vpc` カスタムネットワーク作成
- [ ] **サブネット**: `quiz-subnet` (10.0.1.0/24) 作成
- [ ] **ファイアウォール**: SSH、HTTP、HTTPS許可ルール作成
- [ ] **CloudflareのIP許可**: Nginx設定でCloudflare IPのみ許可

#### [TODO] Compute Engine設定
- [ ] **VMインスタンス**: e2-medium (2vCPU, 4GB) 作成
- [ ] **OS**: Ubuntu 22.04 LTS
- [ ] **起動スクリプト**: Docker, Docker Compose, Nginx自動インストール
- [ ] **固定IP**: 外部IPアドレスを予約・割り当て

#### [TODO] Cloud SQL設定
- [ ] **PostgreSQL作成**: db-f1-micro (最小構成)
- [ ] **ネットワーク**: プライベートIP設定（コスト削減）
- [ ] **バックアップ**: 自動バックアップ無効化（コスト削減）
- [ ] **データベース・ユーザー**: quiz_db, quiz_user作成

#### [TODO] Memorystore Redis設定
- [ ] **Redisインスタンス**: Basic Tier 1GB作成
- [ ] **ネットワーク**: VPC内プライベート接続
- [ ] **永続化設定**: RDB永続化有効
- [ ] **メモリポリシー**: allkeys-lru設定

#### [TODO] Cloud Storage設定
- [ ] **バケット作成**: quiz-app-uploads（画像保存用）
- [ ] **アクセス設定**: 公開読み取り許可
- [ ] **ライフサイクル**: 古い画像の自動アーカイブ設定
- [ ] **CORS設定**: フロントエンドからのアップロード許可

### 🐳 Docker設定

#### [TODO] Container Registry設定
- [ ] **GCR有効化**: Google Container Registry API有効化
- [ ] **認証設定**: gcloud auth configure-docker
- [ ] **イメージ命名規則**: gcr.io/quiz-app-prod/サービス名:タグ
- [ ] **自動削除**: 古いイメージの自動削除ポリシー

#### [TODO] 本番用Docker Compose
- [ ] **docker-compose.prod.yml**: GCP環境用の設定作成
- [ ] **環境変数**: Cloud SQL、Redis、GCSの接続情報設定
- [ ] **ヘルスチェック**: 各サービスの健全性確認
- [ ] **リソース制限**: メモリ・CPU制限設定

### 🔄 CI/CD設定

#### [TODO] GitHub Actions GCPデプロイ
- [ ] **サービスアカウント**: デプロイ用SA作成（最小権限）
- [ ] **ワークフロー**: `.github/workflows/deploy-gcp.yml`作成
- [ ] **イメージビルド**: GCRへのプッシュ自動化
- [ ] **デプロイ**: Compute Engineへの自動デプロイ

#### [TODO] デプロイセキュリティ
- [ ] **Secrets設定**: GCP_SA_KEY等のシークレット登録
- [ ] **環境分離**: staging/production環境の分離
- [ ] **承認フロー**: production環境への手動承認設定
- [ ] **監査ログ**: デプロイ履歴の記録

### 🌐 Cloudflare設定

#### [TODO] 基本設定
- [ ] **ドメイン追加**: Cloudflareにドメイン登録
- [ ] **DNS設定**: A レコードでGCP固定IPを指定
- [ ] **SSL/TLS**: フルエンドツーエンド暗号化設定
- [ ] **HTTPS強制**: Always Use HTTPS有効化

#### [TODO] セキュリティ設定
- [ ] **DDoS保護**: 自動モード有効
- [ ] **WAF**: 基本的なファイアウォールルール設定
- [ ] **Rate Limiting**: APIエンドポイント保護（10req/分）
- [ ] **地域制限**: 必要に応じて日本のみアクセス許可

#### [TODO] パフォーマンス設定
- [ ] **キャッシュ**: 静的ファイルのキャッシュルール
- [ ] **圧縮**: Brotli圧縮有効化
- [ ] **Minify**: JavaScript, CSS, HTML圧縮
- [ ] **画像最適化**: Polish（画像最適化）設定

### 📊 監視・アラート

#### [TODO] 無料監視ツール
- [ ] **UptimeRobot**: エンドポイント死活監視
- [ ] **GCP Monitoring**: 無料枠でのメトリクス監視
- [ ] **Cloudflare Analytics**: トラフィック分析
- [ ] **エラー通知**: Slack/メール通知設定

#### [TODO] ログ管理
- [ ] **Cloud Logging**: アプリケーションログ収集
- [ ] **ログルーター**: 重要ログのみ保存（コスト削減）
- [ ] **ログ分析**: エラーログの自動検知
- [ ] **保存期間**: 7日間（無料枠内）

#### [TODO] バックアップ
- [ ] **Cloud SQL**: 手動バックアップスクリプト
- [ ] **アプリデータ**: GCSへの定期バックアップ
- [ ] **設定ファイル**: Gitリポジトリでバージョン管理
- [ ] **災害復旧**: 復旧手順書作成

### 💡 コスト最適化

#### [TODO] リソース最適化
- [ ] **Committed Use Discounts**: 1年契約で最大57%割引検討
- [ ] **自動スケーリング**: 負荷に応じたリソース調整
- [ ] **Preemptible VM**: 開発環境での利用検討
- [ ] **使用状況分析**: 月次でリソース使用状況確認

#### [TODO] 代替案検討
- [ ] **Redis代替**: VM内Redis実行でMemorystore削減
- [ ] **Cloud SQL代替**: VM内PostgreSQL実行検討
- [ ] **静的ホスティング**: フロントエンドをFirebase Hosting検討
- [ ] **サーバーレス**: Cloud Runへの移行検討（将来）

---

## 📋 実装優先順位

### Phase 1 (1ヶ月目): 基盤構築
1. インフラ選択（VPS or GCP）
2. 基本環境セットアップ
3. Docker本番環境設定
4. SSL証明書とHTTPS化

### Phase 2 (2ヶ月目): CI/CD構築  
1. GitHub Actions デプロイパイプライン
2. 安全なデプロイ設定
3. ゼロダウンタイムデプロイ
4. Cloudflare設定

### Phase 3 (3ヶ月目): 監視・バックアップ
1. 監視ツール導入
2. ログ管理設定
3. バックアップ戦略実装
4. アラート設定

### Phase 4 (4-6ヶ月目): 最適化
1. パフォーマンス最適化
2. コスト最適化
3. セキュリティ強化
4. 災害復旧計画

## 🎯 達成目標

- **月額コスト**: 3,000円以下
- **可用性**: 99%以上
- **レスポンス時間**: 1秒以下
- **同時接続**: 70人安定稼働
- **デプロイ時間**: 5分以内
- **セキュリティ**: OWASP Top 10対応

## 📝 備考

- 両構成とも個人開発に適した低コスト設計
- VPS構成は最もコストを抑えたい場合に推奨
- GCP構成はマネージドサービスで運用負荷を減らしたい場合に推奨
- 将来的な拡張性を考慮するとGCP構成が有利
- 実装前に無料枠・無料クレジットを最大限活用すること

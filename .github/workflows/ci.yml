name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  GO_VERSION: '1.24.4'
  NODE_VERSION: '20'

jobs:
  # Go Code Quality Jobs (Parallel execution)
  go-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install gofumpt
      run: go install mvdan.cc/gofumpt@latest

    - name: Format check
      run: |
        gofumpt -l . | tee /tmp/gofumpt-output
        if [ -s /tmp/gofumpt-output ]; then
          echo "Code is not formatted. Please run 'make fmt' locally."
          exit 1
        fi

  go-lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Cache golangci-lint
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: ~/.cache/golangci-lint
        key: ${{ runner.os }}-golangci-lint-${{ hashFiles('.golangci.yml') }}
        restore-keys: |
          ${{ runner.os }}-golangci-lint-

    - name: Install golangci-lint
      run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

    - name: Create golangci-lint config
      run: |
        cat > .golangci.yml << 'EOF'
        run:
          timeout: 5m
          tests: true
          build-tags:
            - integration

        linters:
          enable:
            - errcheck
            - gosimple
            - govet
            - ineffassign
            - staticcheck
            - typecheck
            - unused
            - gofmt
            - goimports
            - misspell
            - revive
            - gosec
            - goconst
            - gocyclo
        
        linters-settings:
          gosec:
            excludes:
              - G304  # File path provided as taint input (handled with validation)
          gocyclo:
            min-complexity: 20
          revive:
            confidence: 0.8
        EOF

    - name: Lint
      run: golangci-lint run --config .golangci.yml --timeout 5m

  go-vet:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Vet
      run: go vet ./...

  # Go Test Jobs (Parallel execution by test type)
  go-unit-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15@sha256:3156e13d976072c9083fe4c56455b8515dcf6fee23fd770e6ba4a3c6b8837337
        env:
          POSTGRES_DB: quiz_db_test
          POSTGRES_USER: quiz_user
          POSTGRES_PASSWORD: quiz_password
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U quiz_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine@sha256:ee9e8748ace004102a267f7b8265dab2c618317df22507b89d16a8add7154273
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 3

    strategy:
      matrix:
        test-group: [handlers, services, other]

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules and build cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ matrix.test-group }}
        restore-keys: |
          ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          ${{ runner.os }}-go-

    - name: Set up test database
      env:
        PGPASSWORD: quiz_password
      run: |
        echo "Testing database connection..."
        psql -h localhost -U quiz_user -d quiz_db_test -c "SELECT 1" || exit 1
        echo "Database connection successful"
        
        echo "Applying database schema..."
        if [ -f database_schema.sql ]; then
          echo "Found database_schema.sql, applying..."
          psql -h localhost -U quiz_user -d quiz_db_test -f database_schema.sql
          echo "Schema applied successfully"
        else
          echo "Warning: database_schema.sql not found"
        fi
        
        echo "Loading test data..."
        if [ -f test_data.sql ]; then
          echo "Found test_data.sql, loading..."
          psql -h localhost -U quiz_user -d quiz_db_test -f test_data.sql
          echo "Test data loaded successfully"
        else
          echo "Warning: test_data.sql not found"
        fi
        
        echo "Verifying table creation..."
        psql -h localhost -U quiz_user -d quiz_db_test -c "\dt" | grep -E "(administrators|participants|quizzes|answers|quiz_sessions)" || echo "Warning: Some tables may not exist"

    - name: Run unit tests with coverage (parallel)
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: quiz_user
        DB_PASSWORD: quiz_password
        DB_NAME: quiz_db_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        TEST_ENV: true
      run: |
        # Run tests for specific package group with high parallelism
        if [ "${{ matrix.test-group }}" = "other" ]; then
          # Test other packages (models, database, middleware, utils) if they exist
          echo "Testing other packages..."
          TEST_FOUND=false
          for pkg in models database middleware utils; do
            if [ -d "./internal/$pkg" ] && ls ./internal/$pkg/*.go >/dev/null 2>&1; then
              echo "Testing ./internal/$pkg/..."
              go test -v -race -parallel 8 -coverprofile=coverage-$pkg.out -covermode=atomic ./internal/$pkg/... || true
              TEST_FOUND=true
            fi
          done
          
          if [ "$TEST_FOUND" = "true" ]; then
            # Merge coverage files from other packages
            echo "mode: atomic" > coverage-${{ matrix.test-group }}.out
            for pkg in models database middleware utils; do
              if [ -f "coverage-$pkg.out" ] && [ -s "coverage-$pkg.out" ]; then
                echo "Merging coverage-$pkg.out..."
                tail -n +2 "coverage-$pkg.out" | grep -v "mode: atomic" >> coverage-${{ matrix.test-group }}.out || true
                rm -f "coverage-$pkg.out"
              fi
            done
          else
            echo "No test packages found in other group, creating empty coverage file"
            echo "mode: atomic" > coverage-${{ matrix.test-group }}.out
          fi
        else
          # Test specific package
          go test -v -race -parallel 8 -coverprofile=coverage-${{ matrix.test-group }}.out -covermode=atomic ./internal/${{ matrix.test-group }}/...
        fi

    - name: Upload coverage artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: unit-coverage-${{ matrix.test-group }}
        path: coverage-${{ matrix.test-group }}.out

  go-integration-tests:
    runs-on: ubuntu-latest
    # 依存関係を最小限に削減 - フォーマットとベットのみ
    needs: [go-format, go-vet]
    
    services:
      postgres:
        image: postgres:15@sha256:3156e13d976072c9083fe4c56455b8515dcf6fee23fd770e6ba4a3c6b8837337
        env:
          POSTGRES_DB: quiz_db_test
          POSTGRES_USER: quiz_user
          POSTGRES_PASSWORD: quiz_password
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U quiz_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --tmpfs /var/lib/postgresql/data
      
      redis:
        image: redis:7-alpine@sha256:ee9e8748ace004102a267f7b8265dab2c618317df22507b89d16a8add7154273
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 3
          --tmpfs /data

    strategy:
      fail-fast: false
      matrix:
        test-type: [flow-tests, session-tests, concurrent-tests]

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules and build cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-integration-${{ hashFiles('**/go.sum') }}-${{ matrix.test-type }}
        restore-keys: |
          ${{ runner.os }}-go-integration-${{ hashFiles('**/go.sum') }}
          ${{ runner.os }}-go-

    - name: Cache database schema
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          database_schema.sql
          test_data.sql
        key: db-schema-${{ hashFiles('database_schema.sql', 'test_data.sql') }}

    - name: Set up test database (optimized)
      env:
        PGPASSWORD: quiz_password
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: quiz_user
        DB_NAME: quiz_db_test
      run: |
        echo "Testing database connection..."
        psql -h localhost -U quiz_user -d quiz_db_test -c "SELECT 1" || exit 1
        echo "Database connection successful"
        
        echo "Applying database schema..."
        if [ -f database_schema.sql ]; then
          echo "Found database_schema.sql, applying..."
          psql -h localhost -U quiz_user -d quiz_db_test -f database_schema.sql
          echo "Schema applied successfully"
        else
          echo "Warning: database_schema.sql not found"
        fi
        
        echo "Loading test data..."
        if [ -f test_data_light.sql ]; then
          echo "Found test_data_light.sql, loading..."
          psql -h localhost -U quiz_user -d quiz_db_test -f test_data_light.sql
          echo "Light test data loaded successfully"
        elif [ -f test_data.sql ]; then
          echo "Found test_data.sql, loading..."
          psql -h localhost -U quiz_user -d quiz_db_test -f test_data.sql
          echo "Test data loaded successfully"
        else
          echo "Warning: No test data files found"
        fi
        
        echo "Verifying table creation..."
        psql -h localhost -U quiz_user -d quiz_db_test -c "\dt" | grep -E "(administrators|participants|quizzes|answers|quiz_sessions)" || echo "Warning: Some tables may not exist"

    - name: Run integration tests (parallel)
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: quiz_user
        DB_PASSWORD: quiz_password
        DB_NAME: quiz_db_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        TEST_ENV: true
        INTEGRATION_TEST_TYPE: ${{ matrix.test-type }}
      run: |
        # テストタイプ別に並列実行
        case "${{ matrix.test-type }}" in
          "flow-tests")
            echo "Running flow-based integration tests..."
            go test -v -race -parallel 4 -run "TestIntegrationQuizFlow|TestIntegrationParticipantFlow" -coverprofile=coverage-integration-flow.out -covermode=atomic -timeout 5m ./integration_test.go
            ;;
          "session-tests")
            echo "Running session management tests..."
            go test -v -race -parallel 4 -run "TestIntegrationSessionManagement" -coverprofile=coverage-integration-session.out -covermode=atomic -timeout 3m ./integration_test.go
            ;;
          "concurrent-tests")
            echo "Running concurrent access tests..."
            go test -v -race -parallel 2 -run "TestIntegrationConcurrentAnswers" -coverprofile=coverage-integration-concurrent.out -covermode=atomic -timeout 4m ./integration_test.go
            ;;
        esac

    - name: Upload integration coverage
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: integration-coverage-${{ matrix.test-type }}
        path: coverage-integration-*.out

  go-performance-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:15@sha256:3156e13d976072c9083fe4c56455b8515dcf6fee23fd770e6ba4a3c6b8837337
        env:
          POSTGRES_DB: quiz_db_test
          POSTGRES_USER: quiz_user
          POSTGRES_PASSWORD: quiz_password
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U quiz_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine@sha256:ee9e8748ace004102a267f7b8265dab2c618317df22507b89d16a8add7154273
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 3

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules and build cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-performance-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          ${{ runner.os }}-go-

    - name: Set up test database
      env:
        PGPASSWORD: quiz_password
      run: |
        psql -h localhost -U quiz_user -d quiz_db_test -c "SELECT 1" || exit 1
        if [ -f database_schema.sql ]; then
          psql -h localhost -U quiz_user -d quiz_db_test -f database_schema.sql
        fi
        if [ -f test_data.sql ]; then
          psql -h localhost -U quiz_user -d quiz_db_test -f test_data.sql
        fi

    - name: Build application
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: quiz_user
        DB_PASSWORD: quiz_password
        DB_NAME: quiz_db_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-jwt-secret-for-ci
      run: |
        go build -o quiz .

    - name: Start server in background
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: quiz_user
        DB_PASSWORD: quiz_password
        DB_NAME: quiz_db_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        PORT: 8080
        GIN_MODE: release
        JWT_SECRET: test-jwt-secret-for-ci
      run: |
        ./quiz &
        echo $! > server.pid
        
        # Wait for server to start and check health
        echo "Waiting for server to start..."
        sleep 3  # Give server a moment to initialize
        for i in {1..30}; do
          echo "Attempt $i: Checking server health..."
          if curl -f http://localhost:8080/api/session/status >/dev/null 2>&1; then
            echo "✅ Server is running and healthy!"
            curl -s http://localhost:8080/api/session/status | echo "Health check response: $(cat)"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "❌ Server failed to start within 30 seconds"
            echo "Server logs:"
            ps aux | grep quiz || echo "No quiz process found"
            cat server.pid | xargs kill -9 || true
            exit 1
          fi
          sleep 1
        done

    - name: Run performance tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: quiz_user
        DB_PASSWORD: quiz_password
        DB_NAME: quiz_db_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        TEST_ENV: true
        RUN_PERFORMANCE_TESTS: "true"
        GITHUB_ACTIONS: "true"
        PERF_TEST_MAX_USERS: "30"
        PERF_TEST_DURATION: "15s"
      run: |
        go test -v -run "TestConcurrent|TestSystemLoad" -timeout 10m ./performance_test.go

    - name: Stop server
      if: always()
      run: |
        if [ -f server.pid ]; then
          cat server.pid | xargs kill -9 || true
          rm -f server.pid
        fi

  # Coverage Consolidation Job
  go-coverage-report:
    runs-on: ubuntu-latest
    needs: [go-unit-tests, go-integration-tests]
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download all coverage artifacts
      uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
      with:
        pattern: '*-coverage*'
        merge-multiple: true

    - name: Merge coverage reports (optimized)
      run: |
        echo "mode: atomic" > coverage.out
        # Merge coverage files properly, excluding headers and mode lines
        for file in coverage-*.out; do
          if [ -f "$file" ] && [ -s "$file" ]; then
            echo "Merging $file..."
            tail -n +2 "$file" | grep -v "mode: atomic" >> coverage.out || true
          fi
        done
        
        # Validate merged coverage file
        if [ ! -s coverage.out ]; then
          echo "Warning: No coverage data found, creating empty coverage file"
          echo "mode: atomic" > coverage.out
        fi
        
    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out | tee coverage.txt

    - name: Upload consolidated coverage
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: go-coverage-consolidated
        path: |
          coverage.out
          coverage.html
          coverage.txt

    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//' || echo "0")
        echo "Total coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 30" | bc -l) )); then
          echo "Coverage ${COVERAGE}% is below threshold of 30%"
          exit 1
        fi

  # Summary job for all Go tests
  go-backend:
    runs-on: ubuntu-latest
    needs: [go-format, go-lint, go-vet, go-unit-tests, go-integration-tests, go-performance-tests, go-coverage-report]
    
    steps:
    - name: Go backend tests completed
      run: echo "All Go backend tests passed successfully"

  # Nuxt3 Admin Dashboard Tests
  nuxt-admin:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./admin-dashboard

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: admin-dashboard/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Lint
      run: npm run lint || echo "Lint script not found, skipping"

    - name: Run tests
      run: npm run test

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Upload coverage
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: nuxt-coverage
        path: admin-dashboard/coverage/

    - name: Build
      run: npm run build

  # Next.js Participant App Tests  
  nextjs-participant:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./participant-app

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: participant-app/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Lint
      run: npm run lint

    - name: Run tests
      run: npm run test

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Upload coverage
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: nextjs-coverage
        path: participant-app/coverage/

    - name: Build
      run: npm run build

  # Fast E2E Integration Tests
  integration:
    runs-on: ubuntu-latest
    # フロントエンドビルドは並行して実行、Go integrationテストのみ待機
    needs: [go-integration-tests, nuxt-admin, nextjs-participant]
    
    services:
      postgres:
        image: postgres:15@sha256:3156e13d976072c9083fe4c56455b8515dcf6fee23fd770e6ba4a3c6b8837337
        env:
          POSTGRES_DB: quiz_db_test
          POSTGRES_USER: quiz_user
          POSTGRES_PASSWORD: quiz_password
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U quiz_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --tmpfs /var/lib/postgresql/data
      
      redis:
        image: redis:7-alpine@sha256:ee9e8748ace004102a267f7b8265dab2c618317df22507b89d16a8add7154273
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 3
          --tmpfs /data

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache database schema
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          database_schema.sql
          test_data.sql
        key: db-schema-${{ hashFiles('database_schema.sql', 'test_data.sql') }}

    - name: Set up test database (cached)
      env:
        PGPASSWORD: quiz_password
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: quiz_user
        DB_NAME: quiz_db_test
      run: |
        echo "Testing database connection..."
        psql -h localhost -U quiz_user -d quiz_db_test -c "SELECT 1" || exit 1
        echo "Database connection successful"
        
        echo "Applying database schema..."
        if [ -f database_schema.sql ]; then
          echo "Found database_schema.sql, applying..."
          psql -h localhost -U quiz_user -d quiz_db_test -f database_schema.sql
          echo "Schema applied successfully"
        else
          echo "Warning: database_schema.sql not found"
        fi
        
        echo "Loading test data..."
        if [ -f test_data_light.sql ]; then
          echo "Found test_data_light.sql, loading..."
          psql -h localhost -U quiz_user -d quiz_db_test -f test_data_light.sql
          echo "Light test data loaded successfully"
        elif [ -f test_data.sql ]; then
          echo "Found test_data.sql, loading..."
          psql -h localhost -U quiz_user -d quiz_db_test -f test_data.sql
          echo "Test data loaded successfully"
        else
          echo "Warning: No test data files found"
        fi
        
        echo "Verifying table creation..."
        psql -h localhost -U quiz_user -d quiz_db_test -c "\dt" | grep -E "(administrators|participants|quizzes|answers|quiz_sessions)" || echo "Warning: Some tables may not exist"

    - name: Run quick end-to-end verification
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: quiz_user
        DB_PASSWORD: quiz_password
        DB_NAME: quiz_db_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        TEST_ENV: true
      run: |
        # 軽量なE2Eテストのみ実行（詳細テストは前のステップで完了済み）
        if [ -f integration_test.go ]; then
          echo "Running quick verification test..."
          go test -v -race -timeout 2m -run "TestIntegrationQuizFlow" ./integration_test.go
        fi

    - name: Run E2E tests setup check
      working-directory: ./e2e
      run: |
        if [ -f package.json ]; then
          if [ -f package-lock.json ]; then
            echo "Using npm ci with existing package-lock.json"
            npm ci
          else
            echo "No package-lock.json found, using npm install"
            npm install
          fi
          echo "E2E tests dependencies installed"
        fi